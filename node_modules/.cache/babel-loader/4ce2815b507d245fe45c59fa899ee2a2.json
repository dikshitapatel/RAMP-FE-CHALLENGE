{"ast":null,"code":"var _jsxFileName = \"/Users/dikshipatel/Downloads/ramp-fe-challenge 5/src/App.tsx\",\n    _s = $RefreshSig$();\n\nimport { Fragment, useCallback, useEffect, useMemo, useState } from \"react\";\nimport { InputSelect } from \"./components/InputSelect\";\nimport { Instructions } from \"./components/Instructions\";\nimport { Transactions } from \"./components/Transactions\";\nimport { useEmployees } from \"./hooks/useEmployees\";\nimport { usePaginatedTransactions } from \"./hooks/usePaginatedTransactions\";\nimport { useTransactionsByEmployee } from \"./hooks/useTransactionsByEmployee\";\nimport { EMPTY_EMPLOYEE } from \"./utils/constants\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function App() {\n  _s();\n\n  const {\n    data: employees,\n    ...employeeUtils\n  } = useEmployees();\n  const {\n    data: paginatedTransactions,\n    ...paginatedTransactionsUtils\n  } = usePaginatedTransactions();\n  const {\n    data: transactionsByEmployee,\n    ...transactionsByEmployeeUtils\n  } = useTransactionsByEmployee();\n  const [isLoading, setIsLoading] = useState(false);\n  const [allTransactions, setAllTransactions] = useState(null);\n  const transactions = useMemo(() => {\n    var _ref, _paginatedTransaction;\n\n    return (_ref = (_paginatedTransaction = paginatedTransactions === null || paginatedTransactions === void 0 ? void 0 : paginatedTransactions.data) !== null && _paginatedTransaction !== void 0 ? _paginatedTransaction : transactionsByEmployee) !== null && _ref !== void 0 ? _ref : null;\n  }, [paginatedTransactions, transactionsByEmployee]);\n  useEffect(() => {\n    if (transactions !== null) {\n      setAllTransactions(prevTransactions => {\n        if (prevTransactions === null) {\n          return transactions;\n        } else {\n          return [...prevTransactions, ...transactions];\n        }\n      });\n    }\n  }, [transactions]); // Bug 4 fix\n\n  const loadAllTransactions = useCallback(async () => {\n    setIsLoading(true); // transactionsByEmployeeUtils.invalidateData()\n\n    await employeeUtils.fetchAll();\n    setIsLoading(false);\n    await paginatedTransactionsUtils.fetchAll();\n  }, [employeeUtils, paginatedTransactionsUtils, transactionsByEmployeeUtils]);\n  const loadTransactionsByEmployee = useCallback(async employeeId => {\n    paginatedTransactionsUtils.invalidateData();\n    await transactionsByEmployeeUtils.fetchById(employeeId);\n  }, [paginatedTransactionsUtils, transactionsByEmployeeUtils]);\n  useEffect(() => {\n    if (employees === null && !employeeUtils.loading) {\n      loadAllTransactions();\n    } else if (employees !== null) {\n      setIsLoading(false); // Stop loading as soon as employees data is available\n    }\n  }, [employeeUtils.loading, employees, loadAllTransactions]);\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"MainContainer\",\n      children: [/*#__PURE__*/_jsxDEV(Instructions, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"hr\", {\n        className: \"RampBreak--l\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(InputSelect, {\n        isLoading: isLoading,\n        defaultValue: EMPTY_EMPLOYEE,\n        items: employees === null ? [] : [EMPTY_EMPLOYEE, ...employees],\n        label: \"Filter by employee\",\n        loadingLabel: \"Loading employees\",\n        parseItem: item => ({\n          value: item.id,\n          label: `${item.firstName} ${item.lastName}`\n        }),\n        onChange: async newValue => {\n          setAllTransactions(null);\n\n          if (newValue === null) {\n            return;\n          }\n\n          newValue.id !== \"\" ? await loadTransactionsByEmployee(newValue.id) : await loadAllTransactions();\n        }\n        /* Bug 3 */\n\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"RampBreak--l\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"RampGrid\",\n        children: [/*#__PURE__*/_jsxDEV(Transactions, {\n          transactions: allTransactions\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 13\n        }, this), transactions !== null && /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"RampButton\",\n          disabled: paginatedTransactionsUtils.loading || (paginatedTransactions === null || paginatedTransactions === void 0 ? void 0 : paginatedTransactions.nextPage) == null,\n          onClick: async () => {\n            await loadAllTransactions();\n          },\n          children: \"View More\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"1k1UdM4JbNEDXzVcKq2CDOibwmQ=\", false, function () {\n  return [useEmployees, usePaginatedTransactions, useTransactionsByEmployee];\n});\n\n_c = App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["Fragment","useCallback","useEffect","useMemo","useState","InputSelect","Instructions","Transactions","useEmployees","usePaginatedTransactions","useTransactionsByEmployee","EMPTY_EMPLOYEE","App","data","employees","employeeUtils","paginatedTransactions","paginatedTransactionsUtils","transactionsByEmployee","transactionsByEmployeeUtils","isLoading","setIsLoading","allTransactions","setAllTransactions","transactions","prevTransactions","loadAllTransactions","fetchAll","loadTransactionsByEmployee","employeeId","invalidateData","fetchById","loading","item","value","id","label","firstName","lastName","newValue","nextPage"],"sources":["/Users/dikshipatel/Downloads/ramp-fe-challenge 5/src/App.tsx"],"sourcesContent":["import { Fragment, useCallback, useEffect, useMemo, useState } from \"react\"\nimport { InputSelect } from \"./components/InputSelect\"\nimport { Instructions } from \"./components/Instructions\"\nimport { Transactions } from \"./components/Transactions\"\nimport { useEmployees } from \"./hooks/useEmployees\"\nimport { usePaginatedTransactions } from \"./hooks/usePaginatedTransactions\"\nimport { useTransactionsByEmployee } from \"./hooks/useTransactionsByEmployee\"\nimport { EMPTY_EMPLOYEE } from \"./utils/constants\"\nimport {Employee, Transaction} from \"./utils/types\"\n\nexport function App() {\n  const { data: employees, ...employeeUtils } = useEmployees()\n  const { data: paginatedTransactions, ...paginatedTransactionsUtils } = usePaginatedTransactions()\n  const { data: transactionsByEmployee, ...transactionsByEmployeeUtils } = useTransactionsByEmployee()\n  const [isLoading, setIsLoading] = useState(false)\n  const [allTransactions, setAllTransactions] = useState<Transaction[] | null>(null)\n\n  const transactions = useMemo(\n    () => paginatedTransactions?.data ?? transactionsByEmployee ?? null,\n    [paginatedTransactions, transactionsByEmployee]\n  )\n\n    useEffect(() => {\n        if (transactions !== null) {\n            setAllTransactions((prevTransactions) => {\n                if (prevTransactions === null) {\n                    return transactions\n                } else {\n                    return [...prevTransactions, ...transactions]\n                }\n            })\n        }\n    }, [transactions])\n\n    // Bug 4 fix\n\n    const loadAllTransactions = useCallback(async () => {\n        setIsLoading(true)\n        // transactionsByEmployeeUtils.invalidateData()\n\n        await employeeUtils.fetchAll()\n        setIsLoading(false)\n\n        await paginatedTransactionsUtils.fetchAll()\n    }, [employeeUtils, paginatedTransactionsUtils, transactionsByEmployeeUtils])\n\n    const loadTransactionsByEmployee = useCallback(\n    async (employeeId: string) => {\n      paginatedTransactionsUtils.invalidateData()\n      await transactionsByEmployeeUtils.fetchById(employeeId)\n    },\n    [paginatedTransactionsUtils, transactionsByEmployeeUtils]\n  )\n\n  useEffect(() => {\n    if (employees === null && !employeeUtils.loading) {\n      loadAllTransactions()\n    }\n    else if (employees !== null) {\n        setIsLoading(false); // Stop loading as soon as employees data is available\n    }\n  }, [employeeUtils.loading, employees, loadAllTransactions])\n\n  return (\n    <Fragment>\n      <main className=\"MainContainer\">\n        <Instructions />\n\n        <hr className=\"RampBreak--l\" />\n\n        <InputSelect<Employee>\n          isLoading={isLoading}\n          defaultValue={EMPTY_EMPLOYEE}\n          items={employees === null ? [] : [EMPTY_EMPLOYEE, ...employees]}\n          label=\"Filter by employee\"\n          loadingLabel=\"Loading employees\"\n          parseItem={(item) => ({\n            value: item.id,\n            label: `${item.firstName} ${item.lastName}`,\n          })}\n          onChange={async (newValue) => {\n              setAllTransactions(null);\n              if (newValue === null) {\n              return\n            }\n            newValue.id !== \"\"\n                ? await loadTransactionsByEmployee(newValue.id)\n                : await loadAllTransactions()\n          }}\n          /* Bug 3 */\n        />\n\n        <div className=\"RampBreak--l\" />\n\n        <div className=\"RampGrid\">\n            <Transactions transactions={allTransactions} />\n\n          {transactions !== null && (\n            <button\n              className=\"RampButton\"\n              disabled={\n                paginatedTransactionsUtils.loading || paginatedTransactions?.nextPage == null\n              }\n              onClick={async () => {\n                await loadAllTransactions()\n              }}\n            >\n              View More\n            </button>\n          )}\n        </div>\n      </main>\n    </Fragment>\n  )\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}